// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/couriers.dart';
import 'models/customer.dart';
import 'models/manager_couriers_model.dart';
import 'models/order.dart';
import 'models/order_next_button.dart';
import 'models/order_status.dart';
import 'models/organizations.dart';
import 'models/terminals.dart';
import 'models/waiting_order.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 4955723998184028965),
      name: 'Couriers',
      lastPropertyId: const IdUid(4, 1776444435136694885),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8220921239176780094),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8196877216634407924),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 5915899748378784249)),
        ModelProperty(
            id: const IdUid(3, 1184003105681483804),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1776444435136694885),
            name: 'lastName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5473375209576606999),
      name: 'Customer',
      lastPropertyId: const IdUid(4, 7675585321142820053),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1831717027371519211),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6224108448430410819),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(3, 6041090055125413539)),
        ModelProperty(
            id: const IdUid(3, 5022631738739935332),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7675585321142820053),
            name: 'phone',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 4585928615725286779),
      name: 'ManagerCouriersModel',
      lastPropertyId: const IdUid(9, 3965218059845424892),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2958913160681255399),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6834976006247908416),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(4, 4755574621539302571)),
        ModelProperty(
            id: const IdUid(3, 2212481259726862653),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6334384601285152144),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5094802023215205539),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2802662914467989753),
            name: 'terminalId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4857924925043412205),
            name: 'courierId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4469856104079930377),
            name: 'terminalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3965218059845424892),
            name: 'balance',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 789466),
      name: 'OrderModel',
      lastPropertyId: const IdUid(25, 3514177041029269672),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1237772253845156083),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4043831477614509708),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 6097335743628430032)),
        ModelProperty(
            id: const IdUid(3, 5844101188977205762),
            name: 'to_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1082254745410937789),
            name: 'to_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2320196033748530650),
            name: 'from_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7501619028577010744),
            name: 'from_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4163606865485115771),
            name: 'pre_distance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3554203049017470276),
            name: 'order_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7704192191119504457),
            name: 'order_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8456839757906906593),
            name: 'delivery_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 261701052980245815),
            name: 'delivery_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4036776916166659784),
            name: 'delivery_comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8176442382562433843),
            name: 'created_at',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1837456553624467440),
            name: 'paymentType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7768497248809562025),
            name: 'yandexPincode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4293235795440001137),
            name: 'cDeliveryPrice',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3793044038322454657),
            name: 'additional_phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4636640447755966317),
            name: 'house',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4156792526843955482),
            name: 'entrance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3314014150108779229),
            name: 'flat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 1865591932069594544),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7963406002533161542),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(22, 9078805976316943749),
            name: 'terminalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 76294488246563747),
            relationTarget: 'Terminals'),
        ModelProperty(
            id: const IdUid(23, 9142260690491204403),
            name: 'orderStatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 4232124682113797244),
            relationTarget: 'OrderStatus'),
        ModelProperty(
            id: const IdUid(24, 7746920615808984749),
            name: 'organizationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 3992297828445457491),
            relationTarget: 'Organizations'),
        ModelProperty(
            id: const IdUid(25, 3514177041029269672),
            name: 'courierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 3927476809050050658),
            relationTarget: 'Couriers')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7613187243220439849),
            name: 'orderNextButton',
            targetId: const IdUid(6, 4076473343368338481))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4076473343368338481),
      name: 'OrderNextButton',
      lastPropertyId: const IdUid(10, 8870530454611102339),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7588803499799128377),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6048280741433833098),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(11, 2051850693874130345)),
        ModelProperty(
            id: const IdUid(3, 4440907219563623957),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1804734112206229641),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 926748288320997162),
            name: 'sort',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5480181550192238167),
            name: 'finish',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7614120346064880005),
            name: 'cancel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6601786812040547290),
            name: 'waiting',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7571639674710330770),
            name: 'onWay',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8870530454611102339),
            name: 'inTerminal',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7714239418338821462),
      name: 'OrderStatus',
      lastPropertyId: const IdUid(5, 161192711299955867),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7785090973605585800),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 28125061827926453),
            name: 'identity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8118192591686952764),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4025713971589960092),
            name: 'cancel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 161192711299955867),
            name: 'finish',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 4416652976101781313),
      name: 'Organizations',
      lastPropertyId: const IdUid(10, 5769646531673351930),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4525156447660686662),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8394741057431612877),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(12, 2374429530957752465)),
        ModelProperty(
            id: const IdUid(3, 5159789453312005320),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2529365311793947019),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3007349893525881802),
            name: 'iconUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2005046031751747118),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6872904665322479932),
            name: 'maxDistance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6084933270485047968),
            name: 'maxActiveOrderCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7653060597707455815),
            name: 'maxOrderCloseDistance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5769646531673351930),
            name: 'supportChatUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 1830217361042213119),
      name: 'Terminals',
      lastPropertyId: const IdUid(3, 1784256838379703036),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3228663222636896531),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8684926485336329040),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(13, 4591089372081436261)),
        ModelProperty(
            id: const IdUid(3, 1784256838379703036),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 8652548725592521416),
      name: 'WaitingOrderModel',
      lastPropertyId: const IdUid(18, 293521553983635991),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 397888336254129541),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3060400363857841573),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(14, 4267632084633500248)),
        ModelProperty(
            id: const IdUid(3, 6315055203723707741),
            name: 'to_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7335147345107058149),
            name: 'to_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7848445907466730371),
            name: 'from_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4491902761557898188),
            name: 'from_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5165468583376613941),
            name: 'pre_distance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4181431163382753824),
            name: 'order_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 606499749608950579),
            name: 'order_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8663124132331683374),
            name: 'delivery_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5776641537488590555),
            name: 'delivery_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 9066920409271968947),
            name: 'delivery_comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 777860174564320227),
            name: 'created_at',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3979947394416130513),
            name: 'paymentType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5005528945951331076),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 3089324001546128215),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(16, 8643064867818007378),
            name: 'terminalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 3192171549795321792),
            relationTarget: 'Terminals'),
        ModelProperty(
            id: const IdUid(17, 7762396102497464952),
            name: 'orderStatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 2830062244035905251),
            relationTarget: 'OrderStatus'),
        ModelProperty(
            id: const IdUid(18, 293521553983635991),
            name: 'organizationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 684422398799809103),
            relationTarget: 'Organizations')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 9208783192562743855),
            name: 'orderNextButton',
            targetId: const IdUid(6, 4076473343368338481))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(10, 8652548725592521416),
      lastIndexId: const IdUid(18, 684422398799809103),
      lastRelationId: const IdUid(2, 9208783192562743855),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [8277430634145776413],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5433239361472065801,
        4383526011583149542,
        5082264500589599139,
        1176246109742688508
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Couriers: EntityDefinition<Couriers>(
        model: _entities[0],
        toOneRelations: (Couriers object) => [],
        toManyRelations: (Couriers object) => {},
        getId: (Couriers object) => object.id,
        setId: (Couriers object, int id) {
          object.id = id;
        },
        objectToFB: (Couriers object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Couriers(
              identity: identityParam,
              firstName: firstNameParam,
              lastName: lastNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[1],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Customer(
              identity: identityParam, name: nameParam, phone: phoneParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ManagerCouriersModel: EntityDefinition<ManagerCouriersModel>(
        model: _entities[2],
        toOneRelations: (ManagerCouriersModel object) => [],
        toManyRelations: (ManagerCouriersModel object) => {},
        getId: (ManagerCouriersModel object) => object.id,
        setId: (ManagerCouriersModel object, int id) {
          object.id = id;
        },
        objectToFB: (ManagerCouriersModel object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final phoneOffset = fbb.writeString(object.phone);
          final terminalIdOffset = fbb.writeString(object.terminalId);
          final courierIdOffset = fbb.writeString(object.courierId);
          final terminalNameOffset = fbb.writeString(object.terminalName);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, terminalIdOffset);
          fbb.addOffset(6, courierIdOffset);
          fbb.addOffset(7, terminalNameOffset);
          fbb.addInt64(8, object.balance);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final terminalIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final courierIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final terminalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final balanceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = ManagerCouriersModel(
              identity: identityParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              phone: phoneParam,
              terminalId: terminalIdParam,
              courierId: courierIdParam,
              terminalName: terminalNameParam,
              balance: balanceParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OrderModel: EntityDefinition<OrderModel>(
        model: _entities[3],
        toOneRelations: (OrderModel object) => [
              object.customer,
              object.terminal,
              object.orderStatus,
              object.organization,
              object.courier
            ],
        toManyRelations: (OrderModel object) =>
            {RelInfo<OrderModel>.toMany(1, object.id): object.orderNextButton},
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final order_numberOffset = fbb.writeString(object.order_number);
          final delivery_addressOffset = object.delivery_address == null
              ? null
              : fbb.writeString(object.delivery_address!);
          final delivery_commentOffset = object.delivery_comment == null
              ? null
              : fbb.writeString(object.delivery_comment!);
          final paymentTypeOffset = object.paymentType == null
              ? null
              : fbb.writeString(object.paymentType!);
          final yandexPincodeOffset = object.yandexPincode == null
              ? null
              : fbb.writeString(object.yandexPincode!);
          final additional_phoneOffset = object.additional_phone == null
              ? null
              : fbb.writeString(object.additional_phone!);
          final houseOffset =
              object.house == null ? null : fbb.writeString(object.house!);
          final entranceOffset = object.entrance == null
              ? null
              : fbb.writeString(object.entrance!);
          final flatOffset =
              object.flat == null ? null : fbb.writeString(object.flat!);
          fbb.startTable(26);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addFloat64(2, object.to_lat);
          fbb.addFloat64(3, object.to_lon);
          fbb.addFloat64(4, object.from_lat);
          fbb.addFloat64(5, object.from_lon);
          fbb.addFloat64(6, object.pre_distance);
          fbb.addOffset(7, order_numberOffset);
          fbb.addInt64(8, object.order_price);
          fbb.addInt64(9, object.delivery_price);
          fbb.addOffset(10, delivery_addressOffset);
          fbb.addOffset(11, delivery_commentOffset);
          fbb.addInt64(12, object.created_at.millisecondsSinceEpoch);
          fbb.addOffset(13, paymentTypeOffset);
          fbb.addOffset(14, yandexPincodeOffset);
          fbb.addInt64(15, object.cDeliveryPrice);
          fbb.addOffset(16, additional_phoneOffset);
          fbb.addOffset(17, houseOffset);
          fbb.addOffset(18, entranceOffset);
          fbb.addOffset(19, flatOffset);
          fbb.addInt64(20, object.customer.targetId);
          fbb.addInt64(21, object.terminal.targetId);
          fbb.addInt64(22, object.orderStatus.targetId);
          fbb.addInt64(23, object.organization.targetId);
          fbb.addInt64(24, object.courier.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final to_latParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final to_lonParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final pre_distanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final order_numberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final order_priceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final delivery_priceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final delivery_addressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final delivery_commentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final created_atParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final from_latParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final from_lonParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final paymentTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final yandexPincodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final cDeliveryPriceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final additional_phoneParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final houseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final entranceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final flatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final object = OrderModel(
              identity: identityParam,
              to_lat: to_latParam,
              to_lon: to_lonParam,
              pre_distance: pre_distanceParam,
              order_number: order_numberParam,
              order_price: order_priceParam,
              delivery_price: delivery_priceParam,
              delivery_address: delivery_addressParam,
              delivery_comment: delivery_commentParam,
              created_at: created_atParam,
              from_lat: from_latParam,
              from_lon: from_lonParam,
              paymentType: paymentTypeParam,
              yandexPincode: yandexPincodeParam,
              cDeliveryPrice: cDeliveryPriceParam,
              additional_phone: additional_phoneParam,
              house: houseParam,
              entrance: entranceParam,
              flat: flatParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.customer.attach(store);
          object.terminal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.terminal.attach(store);
          object.orderStatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.orderStatus.attach(store);
          object.organization.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.organization.attach(store);
          object.courier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.courier.attach(store);
          InternalToManyAccess.setRelInfo<OrderModel>(object.orderNextButton,
              store, RelInfo<OrderModel>.toMany(1, object.id));
          return object;
        }),
    OrderNextButton: EntityDefinition<OrderNextButton>(
        model: _entities[4],
        toOneRelations: (OrderNextButton object) => [],
        toManyRelations: (OrderNextButton object) => {},
        getId: (OrderNextButton object) => object.id,
        setId: (OrderNextButton object, int id) {
          object.id = id;
        },
        objectToFB: (OrderNextButton object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, colorOffset);
          fbb.addInt64(4, object.sort);
          fbb.addBool(5, object.finish);
          fbb.addBool(6, object.cancel);
          fbb.addBool(7, object.waiting);
          fbb.addBool(8, object.onWay);
          fbb.addBool(9, object.inTerminal);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final sortParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final finishParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final cancelParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final waitingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final onWayParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final inTerminalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = OrderNextButton(
              identity: identityParam,
              name: nameParam,
              color: colorParam,
              sort: sortParam,
              finish: finishParam,
              cancel: cancelParam,
              waiting: waitingParam,
              onWay: onWayParam,
              inTerminal: inTerminalParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OrderStatus: EntityDefinition<OrderStatus>(
        model: _entities[5],
        toOneRelations: (OrderStatus object) => [],
        toManyRelations: (OrderStatus object) => {},
        getId: (OrderStatus object) => object.id,
        setId: (OrderStatus object, int id) {
          object.id = id;
        },
        objectToFB: (OrderStatus object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.cancel);
          fbb.addBool(4, object.finish);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final cancelParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final finishParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = OrderStatus(
              identity: identityParam,
              name: nameParam,
              cancel: cancelParam,
              finish: finishParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Organizations: EntityDefinition<Organizations>(
        model: _entities[6],
        toOneRelations: (Organizations object) => [],
        toManyRelations: (Organizations object) => {},
        getId: (Organizations object) => object.id,
        setId: (Organizations object, int id) {
          object.id = id;
        },
        objectToFB: (Organizations object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          final iconUrlOffset =
              object.iconUrl == null ? null : fbb.writeString(object.iconUrl!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final supportChatUrlOffset = fbb.writeString(object.supportChatUrl);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.active);
          fbb.addOffset(4, iconUrlOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.maxDistance);
          fbb.addInt64(7, object.maxActiveOrderCount);
          fbb.addInt64(8, object.maxOrderCloseDistance);
          fbb.addOffset(9, supportChatUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final activeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final iconUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final maxDistanceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final maxActiveOrderCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final maxOrderCloseDistanceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final supportChatUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final object = Organizations(
              identityParam,
              nameParam,
              activeParam,
              iconUrlParam,
              descriptionParam,
              maxDistanceParam,
              maxActiveOrderCountParam,
              maxOrderCloseDistanceParam,
              supportChatUrlParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Terminals: EntityDefinition<Terminals>(
        model: _entities[7],
        toOneRelations: (Terminals object) => [],
        toManyRelations: (Terminals object) => {},
        getId: (Terminals object) => object.id,
        setId: (Terminals object, int id) {
          object.id = id;
        },
        objectToFB: (Terminals object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Terminals(identity: identityParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    WaitingOrderModel: EntityDefinition<WaitingOrderModel>(
        model: _entities[8],
        toOneRelations: (WaitingOrderModel object) => [
              object.customer,
              object.terminal,
              object.orderStatus,
              object.organization
            ],
        toManyRelations: (WaitingOrderModel object) => {
              RelInfo<WaitingOrderModel>.toMany(2, object.id):
                  object.orderNextButton
            },
        getId: (WaitingOrderModel object) => object.id,
        setId: (WaitingOrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (WaitingOrderModel object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final order_numberOffset = fbb.writeString(object.order_number);
          final delivery_addressOffset = object.delivery_address == null
              ? null
              : fbb.writeString(object.delivery_address!);
          final delivery_commentOffset = object.delivery_comment == null
              ? null
              : fbb.writeString(object.delivery_comment!);
          final paymentTypeOffset = object.paymentType == null
              ? null
              : fbb.writeString(object.paymentType!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addFloat64(2, object.to_lat);
          fbb.addFloat64(3, object.to_lon);
          fbb.addFloat64(4, object.from_lat);
          fbb.addFloat64(5, object.from_lon);
          fbb.addFloat64(6, object.pre_distance);
          fbb.addOffset(7, order_numberOffset);
          fbb.addInt64(8, object.order_price);
          fbb.addInt64(9, object.delivery_price);
          fbb.addOffset(10, delivery_addressOffset);
          fbb.addOffset(11, delivery_commentOffset);
          fbb.addInt64(12, object.created_at.millisecondsSinceEpoch);
          fbb.addOffset(13, paymentTypeOffset);
          fbb.addInt64(14, object.customer.targetId);
          fbb.addInt64(15, object.terminal.targetId);
          fbb.addInt64(16, object.orderStatus.targetId);
          fbb.addInt64(17, object.organization.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final identityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final to_latParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final to_lonParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final from_latParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final from_lonParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final pre_distanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final order_numberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final order_priceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final delivery_priceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final delivery_addressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final delivery_commentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final created_atParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final paymentTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final object = WaitingOrderModel(
              identity: identityParam,
              to_lat: to_latParam,
              to_lon: to_lonParam,
              from_lat: from_latParam,
              from_lon: from_lonParam,
              pre_distance: pre_distanceParam,
              order_number: order_numberParam,
              order_price: order_priceParam,
              delivery_price: delivery_priceParam,
              delivery_address: delivery_addressParam,
              delivery_comment: delivery_commentParam,
              created_at: created_atParam,
              paymentType: paymentTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.customer.attach(store);
          object.terminal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.terminal.attach(store);
          object.orderStatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.orderStatus.attach(store);
          object.organization.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          object.organization.attach(store);
          InternalToManyAccess.setRelInfo<WaitingOrderModel>(
              object.orderNextButton,
              store,
              RelInfo<WaitingOrderModel>.toMany(2, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Couriers] entity fields to define ObjectBox queries.
class Couriers_ {
  /// see [Couriers.id]
  static final id = QueryIntegerProperty<Couriers>(_entities[0].properties[0]);

  /// see [Couriers.identity]
  static final identity =
      QueryStringProperty<Couriers>(_entities[0].properties[1]);

  /// see [Couriers.firstName]
  static final firstName =
      QueryStringProperty<Couriers>(_entities[0].properties[2]);

  /// see [Couriers.lastName]
  static final lastName =
      QueryStringProperty<Couriers>(_entities[0].properties[3]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[1].properties[0]);

  /// see [Customer.identity]
  static final identity =
      QueryStringProperty<Customer>(_entities[1].properties[1]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[1].properties[2]);

  /// see [Customer.phone]
  static final phone =
      QueryStringProperty<Customer>(_entities[1].properties[3]);
}

/// [ManagerCouriersModel] entity fields to define ObjectBox queries.
class ManagerCouriersModel_ {
  /// see [ManagerCouriersModel.id]
  static final id =
      QueryIntegerProperty<ManagerCouriersModel>(_entities[2].properties[0]);

  /// see [ManagerCouriersModel.identity]
  static final identity =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[1]);

  /// see [ManagerCouriersModel.firstName]
  static final firstName =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[2]);

  /// see [ManagerCouriersModel.lastName]
  static final lastName =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[3]);

  /// see [ManagerCouriersModel.phone]
  static final phone =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[4]);

  /// see [ManagerCouriersModel.terminalId]
  static final terminalId =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[5]);

  /// see [ManagerCouriersModel.courierId]
  static final courierId =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[6]);

  /// see [ManagerCouriersModel.terminalName]
  static final terminalName =
      QueryStringProperty<ManagerCouriersModel>(_entities[2].properties[7]);

  /// see [ManagerCouriersModel.balance]
  static final balance =
      QueryIntegerProperty<ManagerCouriersModel>(_entities[2].properties[8]);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// see [OrderModel.id]
  static final id =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[0]);

  /// see [OrderModel.identity]
  static final identity =
      QueryStringProperty<OrderModel>(_entities[3].properties[1]);

  /// see [OrderModel.to_lat]
  static final to_lat =
      QueryDoubleProperty<OrderModel>(_entities[3].properties[2]);

  /// see [OrderModel.to_lon]
  static final to_lon =
      QueryDoubleProperty<OrderModel>(_entities[3].properties[3]);

  /// see [OrderModel.from_lat]
  static final from_lat =
      QueryDoubleProperty<OrderModel>(_entities[3].properties[4]);

  /// see [OrderModel.from_lon]
  static final from_lon =
      QueryDoubleProperty<OrderModel>(_entities[3].properties[5]);

  /// see [OrderModel.pre_distance]
  static final pre_distance =
      QueryDoubleProperty<OrderModel>(_entities[3].properties[6]);

  /// see [OrderModel.order_number]
  static final order_number =
      QueryStringProperty<OrderModel>(_entities[3].properties[7]);

  /// see [OrderModel.order_price]
  static final order_price =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[8]);

  /// see [OrderModel.delivery_price]
  static final delivery_price =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[9]);

  /// see [OrderModel.delivery_address]
  static final delivery_address =
      QueryStringProperty<OrderModel>(_entities[3].properties[10]);

  /// see [OrderModel.delivery_comment]
  static final delivery_comment =
      QueryStringProperty<OrderModel>(_entities[3].properties[11]);

  /// see [OrderModel.created_at]
  static final created_at =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[12]);

  /// see [OrderModel.paymentType]
  static final paymentType =
      QueryStringProperty<OrderModel>(_entities[3].properties[13]);

  /// see [OrderModel.yandexPincode]
  static final yandexPincode =
      QueryStringProperty<OrderModel>(_entities[3].properties[14]);

  /// see [OrderModel.cDeliveryPrice]
  static final cDeliveryPrice =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[15]);

  /// see [OrderModel.additional_phone]
  static final additional_phone =
      QueryStringProperty<OrderModel>(_entities[3].properties[16]);

  /// see [OrderModel.house]
  static final house =
      QueryStringProperty<OrderModel>(_entities[3].properties[17]);

  /// see [OrderModel.entrance]
  static final entrance =
      QueryStringProperty<OrderModel>(_entities[3].properties[18]);

  /// see [OrderModel.flat]
  static final flat =
      QueryStringProperty<OrderModel>(_entities[3].properties[19]);

  /// see [OrderModel.customer]
  static final customer =
      QueryRelationToOne<OrderModel, Customer>(_entities[3].properties[20]);

  /// see [OrderModel.terminal]
  static final terminal =
      QueryRelationToOne<OrderModel, Terminals>(_entities[3].properties[21]);

  /// see [OrderModel.orderStatus]
  static final orderStatus =
      QueryRelationToOne<OrderModel, OrderStatus>(_entities[3].properties[22]);

  /// see [OrderModel.organization]
  static final organization = QueryRelationToOne<OrderModel, Organizations>(
      _entities[3].properties[23]);

  /// see [OrderModel.courier]
  static final courier =
      QueryRelationToOne<OrderModel, Couriers>(_entities[3].properties[24]);

  /// see [OrderModel.orderNextButton]
  static final orderNextButton =
      QueryRelationToMany<OrderModel, OrderNextButton>(
          _entities[3].relations[0]);
}

/// [OrderNextButton] entity fields to define ObjectBox queries.
class OrderNextButton_ {
  /// see [OrderNextButton.id]
  static final id =
      QueryIntegerProperty<OrderNextButton>(_entities[4].properties[0]);

  /// see [OrderNextButton.identity]
  static final identity =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[1]);

  /// see [OrderNextButton.name]
  static final name =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[2]);

  /// see [OrderNextButton.color]
  static final color =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[3]);

  /// see [OrderNextButton.sort]
  static final sort =
      QueryIntegerProperty<OrderNextButton>(_entities[4].properties[4]);

  /// see [OrderNextButton.finish]
  static final finish =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[5]);

  /// see [OrderNextButton.cancel]
  static final cancel =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[6]);

  /// see [OrderNextButton.waiting]
  static final waiting =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[7]);

  /// see [OrderNextButton.onWay]
  static final onWay =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[8]);

  /// see [OrderNextButton.inTerminal]
  static final inTerminal =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[9]);
}

/// [OrderStatus] entity fields to define ObjectBox queries.
class OrderStatus_ {
  /// see [OrderStatus.id]
  static final id =
      QueryIntegerProperty<OrderStatus>(_entities[5].properties[0]);

  /// see [OrderStatus.identity]
  static final identity =
      QueryStringProperty<OrderStatus>(_entities[5].properties[1]);

  /// see [OrderStatus.name]
  static final name =
      QueryStringProperty<OrderStatus>(_entities[5].properties[2]);

  /// see [OrderStatus.cancel]
  static final cancel =
      QueryBooleanProperty<OrderStatus>(_entities[5].properties[3]);

  /// see [OrderStatus.finish]
  static final finish =
      QueryBooleanProperty<OrderStatus>(_entities[5].properties[4]);
}

/// [Organizations] entity fields to define ObjectBox queries.
class Organizations_ {
  /// see [Organizations.id]
  static final id =
      QueryIntegerProperty<Organizations>(_entities[6].properties[0]);

  /// see [Organizations.identity]
  static final identity =
      QueryStringProperty<Organizations>(_entities[6].properties[1]);

  /// see [Organizations.name]
  static final name =
      QueryStringProperty<Organizations>(_entities[6].properties[2]);

  /// see [Organizations.active]
  static final active =
      QueryBooleanProperty<Organizations>(_entities[6].properties[3]);

  /// see [Organizations.iconUrl]
  static final iconUrl =
      QueryStringProperty<Organizations>(_entities[6].properties[4]);

  /// see [Organizations.description]
  static final description =
      QueryStringProperty<Organizations>(_entities[6].properties[5]);

  /// see [Organizations.maxDistance]
  static final maxDistance =
      QueryIntegerProperty<Organizations>(_entities[6].properties[6]);

  /// see [Organizations.maxActiveOrderCount]
  static final maxActiveOrderCount =
      QueryIntegerProperty<Organizations>(_entities[6].properties[7]);

  /// see [Organizations.maxOrderCloseDistance]
  static final maxOrderCloseDistance =
      QueryIntegerProperty<Organizations>(_entities[6].properties[8]);

  /// see [Organizations.supportChatUrl]
  static final supportChatUrl =
      QueryStringProperty<Organizations>(_entities[6].properties[9]);
}

/// [Terminals] entity fields to define ObjectBox queries.
class Terminals_ {
  /// see [Terminals.id]
  static final id = QueryIntegerProperty<Terminals>(_entities[7].properties[0]);

  /// see [Terminals.identity]
  static final identity =
      QueryStringProperty<Terminals>(_entities[7].properties[1]);

  /// see [Terminals.name]
  static final name =
      QueryStringProperty<Terminals>(_entities[7].properties[2]);
}

/// [WaitingOrderModel] entity fields to define ObjectBox queries.
class WaitingOrderModel_ {
  /// see [WaitingOrderModel.id]
  static final id =
      QueryIntegerProperty<WaitingOrderModel>(_entities[8].properties[0]);

  /// see [WaitingOrderModel.identity]
  static final identity =
      QueryStringProperty<WaitingOrderModel>(_entities[8].properties[1]);

  /// see [WaitingOrderModel.to_lat]
  static final to_lat =
      QueryDoubleProperty<WaitingOrderModel>(_entities[8].properties[2]);

  /// see [WaitingOrderModel.to_lon]
  static final to_lon =
      QueryDoubleProperty<WaitingOrderModel>(_entities[8].properties[3]);

  /// see [WaitingOrderModel.from_lat]
  static final from_lat =
      QueryDoubleProperty<WaitingOrderModel>(_entities[8].properties[4]);

  /// see [WaitingOrderModel.from_lon]
  static final from_lon =
      QueryDoubleProperty<WaitingOrderModel>(_entities[8].properties[5]);

  /// see [WaitingOrderModel.pre_distance]
  static final pre_distance =
      QueryDoubleProperty<WaitingOrderModel>(_entities[8].properties[6]);

  /// see [WaitingOrderModel.order_number]
  static final order_number =
      QueryStringProperty<WaitingOrderModel>(_entities[8].properties[7]);

  /// see [WaitingOrderModel.order_price]
  static final order_price =
      QueryIntegerProperty<WaitingOrderModel>(_entities[8].properties[8]);

  /// see [WaitingOrderModel.delivery_price]
  static final delivery_price =
      QueryIntegerProperty<WaitingOrderModel>(_entities[8].properties[9]);

  /// see [WaitingOrderModel.delivery_address]
  static final delivery_address =
      QueryStringProperty<WaitingOrderModel>(_entities[8].properties[10]);

  /// see [WaitingOrderModel.delivery_comment]
  static final delivery_comment =
      QueryStringProperty<WaitingOrderModel>(_entities[8].properties[11]);

  /// see [WaitingOrderModel.created_at]
  static final created_at =
      QueryIntegerProperty<WaitingOrderModel>(_entities[8].properties[12]);

  /// see [WaitingOrderModel.paymentType]
  static final paymentType =
      QueryStringProperty<WaitingOrderModel>(_entities[8].properties[13]);

  /// see [WaitingOrderModel.customer]
  static final customer = QueryRelationToOne<WaitingOrderModel, Customer>(
      _entities[8].properties[14]);

  /// see [WaitingOrderModel.terminal]
  static final terminal = QueryRelationToOne<WaitingOrderModel, Terminals>(
      _entities[8].properties[15]);

  /// see [WaitingOrderModel.orderStatus]
  static final orderStatus = QueryRelationToOne<WaitingOrderModel, OrderStatus>(
      _entities[8].properties[16]);

  /// see [WaitingOrderModel.organization]
  static final organization =
      QueryRelationToOne<WaitingOrderModel, Organizations>(
          _entities[8].properties[17]);

  /// see [WaitingOrderModel.orderNextButton]
  static final orderNextButton =
      QueryRelationToMany<WaitingOrderModel, OrderNextButton>(
          _entities[8].relations[0]);
}
